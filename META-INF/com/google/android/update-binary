#!/bin/sh

OUTFD=/proc/self/fd/$2
ZIPFILE="$(pwd)/$3"

#分区地址目录
pt_dir="/dev/block/by-name"
fw="firmware-update"
img_list="img_list.txt"

#进入work space
tmp=/data/tmp
rm -rf $tmp
mkdir -p $tmp
cd $tmp

# 获取镜像列表
unzip -l $ZIPFILE | grep "$fw" | grep "\." | awk '{print $4}' | grep img > $img_list
unzip -l $ZIPFILE | grep "images" | grep "\." | awk '{print $4}' >> $img_list

#---------------------函数定义-------------------------

    ui_print() {
        echo -e "ui_print $1\nui_print" >>$OUTFD
    }
    
    
    log() {
        out=""
        for i in $@
        do
            out+="$i "
        done
        echo "$out" | tee -a  ./zhlhlf.log
    }
    
    abort() { 
        ui_print "$1"
        ui_print " "
        exit 1
    }
    
    exist() {
        if [ "$(cat $img_list | grep $1)" ];then
            echo 1
        else        
            echo 0
        fi
    }
    
    keyListener() {
        key=$(getevent -qlc 1 2>&1 | grep VOLUME | grep " DOWN" | awk '{print $3}')
        if [ $key = "KEY_VOLUMEUP" ]; then
            echo 1
        elif [ $key = "KEY_VOLUMEDOWN" ]; then
            echo 0
        else
            keyListener
        fi
    }
    
    package_extract_file() {
        ui_print "flash `basename $1` -> `basename $2`"
        if [ "$3" ];then
            dd if=$1 of=$2 bs=4K
        else
            unzip -p "$ZIPFILE" $1 >$2  
        fi
        # 清除待刷机镜像列表
        sed -i "s#$1##g" $img_list
    
    }
    
    package_extract_zstd() {
        ui_print "flash `basename $1` to `basename $2`"
        unzip -p "$ZIPFILE" $1 | $tmp/scripts/zstd -c -d >$2
        # 清除待刷机镜像列表
        sed -i "s#$1##g" $img_list
    }

    check_datasize(){
        #判断data是否挂载成功能否有足够大小存放解包出来的images
        datasize=$(df -h /data | grep /dev/block | awk '{print $4}')
        if [ `echo $datasize | sed s/[[:digit:]]//g` = "G" ] && [ `echo $datasize | sed s/G//g` -gt 20 ];then
            return
        else
            log "data分区大小错误，需要自行格式化data分区"
            abort "data mount fail"
        fi
    }

    flash_super(){
        . ./scripts/functions.sh
        make_super "$super_size" "project" "$list_super" "VAB" "$1"
        if [ -f project/super.img ];then
            package_extract_file project/super.img $pt_dir/super "1"
        else
            abort "make super fail"
        fi
    }

    #flash非super镜像
    flash_image() {
        i=$1
        i1=`basename $i`
        i1=${i1%.img*}
        package_extract_file "$i" "$pt_dir/${i1}_$_ab"
    }

#---------------------函数定义-------------------------



#判断ddr类型
if [ "$(cat /proc/devinfo/ddr_type | grep -i DDR4)" ];then
    hh=ddr4
elif [ "$(cat /proc/devinfo/ddr_type | grep -i DDR5)" ];then
    hh=ddr5
elif [ "$(getprop ro.boot.ddr_type | grep -i 0)" ]; then
    hh=ddr4
elif [ "$(getprop ro.boot.ddr_type | grep -i 1)" ]; then
    hh=ddr5
else
    abort "ddr get fail"
fi

ui_print " "
ui_print "you device type is: $hh"
ui_print "-----------------------------------------"
ui_print "             Author by zhlhlf"
ui_print "-----------------------------------------"

#判断刷入的是a还是b分区
ui_print "flash fw  -> a or b?    + is a   ||  - is b"
_ab=$(keyListener)
if [ $_ab = 1 ];then
  _ab=a
elif [ $_ab = 0 ];then
  _ab=b
fi

#刷入fw
for i in `cat $img_list | grep $fw`
do
    flash_image $i
done

#刷入ddr4 or ddr5
if [ $hh = "ddr4" ];then
   package_extract_file "$fw/xbl.img" "$pt_dir/xbl_$_ab"
   package_extract_file "$fw/xbl_config.img" "$pt_dir/xbl_config_$_ab"
elif [ $hh = "ddr5" ];then
   package_extract_file "$fw/xbl_lp5.img" "$pt_dir/xbl_$_ab"
   package_extract_file "$fw/xbl_config_lp5.img" "$pt_dir/xbl_config_$_ab"
fi


#刷入super并刷入images剩余部分
ui_print " "
ui_print "flash rom  -> a or b?    + is a   ||  - is b"
_ab=$(keyListener)
if [ $_ab = 1 ];then
  _ab=a
elif [ $_ab = 0 ];then
  _ab=b
fi

# 刷入*boot* *vbmeta* dtbo
if [ `exist "images/boot.img"` = 1 ];then
    for i in `cat $img_list | grep -e "boot" -e "vbmeta" -e "dtbo"`
    do
        flash_image $i
    done
fi

unzip -q "$ZIPFILE" scripts/*
export PATH=$(pwd)/scripts:$PATH
chmod 777 * -R


if [ `exist "images/super."` = 1 ];then
    ui_print "flash rom  -> a"
    
    #flash super..
    if [ `exist "images/super.zst"` = 1 ];then
        package_extract_zstd "images/super.zst" "$pt_dir/super"
    elif [ `exist "images/super.img"` = 1 ];then
        flash_image "images/super.img"
    fi
    
elif [ `exist "images/system.img"` = 1 ];then

    check_datasize 

    ui_print "extarct images/* ..."

    # 根据images里面剩余的镜像生成super
    list_super=""
    for i in `cat $img_list | grep images`
    do
        i1=`basename $i`
        unzip -q "$ZIPFILE" "$i"
        list_super+="$i1 "
    done
  
    mv images project

    #获取super的大小    
    size2=`sgdisk /dev/block/sda --print | grep super | awk '{print $3}'`
    size1=`sgdisk /dev/block/sda --print | grep super | awk '{print $2}'`
    super_size=`echo "($size2 - $size1 + 1) * 4096" | bc`

    log "$list_super" "$super_size"

    #开始生成和刷入super并刷入images剩余部分
    flash_super $_ab
fi
#rm -rf $tmp
